# Developed by Kurt Lust for LUMI
# Before installing set the secret source path of the container in 
# EASYBUILD_SOURCEPATH.
#DOC This is a module to enable work in the CPE container for 24.11 as it comes from HPE,
#DOC so with no modifications inside the containers to better match with LUMI.
easyblock = 'MakeCp'

name =          'ccpe'
version =       '24.11'
versionsuffix = '-raw'

local_ccpe_version = ''.join(version.split('.'))
local_sif = f'cpe_{local_ccpe_version}.sif'

homepage = 'https://cpe.ext.hpe.com/docs/24.11/index.html'

whatis = [
    'Description: Containerised HPE-Cray Programming Environment'
]

description = f"""
This version provides the {version} programming environment in a container
to start experimenting with this version before it is generally available
on LUMI.

The module sets the necessary bindings to be able to access regular user
files on LUMI, to import some bits and pieces that are not in the container,
and to be able to call Slurm from within the container.

The module defines a number of environment variables:
*   SIF and SIFCCPE: The full path and name of the Singularity SIF file 
    to use with singularity exec etc.
    
Inside the container only:
*   INITCCPE: `eval $INITCCPE` can be used to fully re-initialise the 
    environment in the container.
    
Helper scripts outside the container:
*   `ccpe-shell` starts a shell in the container using `singularity shell`.
*   `ccpe-exec` executes the command passed as arguments in the container 
    using `singularity exec`.
"""

toolchain = SYSTEM

sources = [
    {
        'filename':    local_sif,
        'extract_cmd': '/bin/cp -L %s .'
    },
]

skipsteps = ['build']

files_to_copy = [
    ([local_sif], '.'),
]

################################################################################
#
# Script 99-z-init-ccpe.sh
#
# Initialisation script for /etc/profile.d
#
local_99_z_ccpe_init = """
#echo "Executing 99-z-init-ccpe.sh..."
export INITCCPE='
if [ "$CCPE_VERSION" != "24.11" ] ;
then

    # Setup of the PE.
    lmod_dir="/opt/cray/pe/lmod/lmod" ;
    
    [ -d $HOME/.lmod.d/.cache ] && /bin/rm -rf $HOME/.lmod.d/.cache ;
    [ -d $HOME/.cache/lmod ]    && /bin/rm -rf $HOME/.cache/lmod ;
    
    source /etc/cray-pe.d/cray-pe-configuration.sh ;
    
    source $lmod_dir/init/profile ;
    
    mod_paths="/opt/cray/pe/lmod/modulefiles/core /opt/cray/pe/lmod/modulefiles/craype-targets/default $mpaths /opt/cray/modulefiles /opt/modulefiles" ;
    MODULEPATH="" ;
    for p in $(echo $mod_paths) ; do 
        if [ -d $p ] ; then
            MODULEPATH=$MODULEPATH:$p ;
        fi
    done ;
    export MODULEPATH=${MODULEPATH/:/} ;
    
    LMOD_SYSTEM_DEFAULT_MODULES=$(echo ${init_module_list:-PrgEnv-$default_prgenv} | sed -E "s_[[:space:]]+_:_g") ;
    export LMOD_SYSTEM_DEFAULT_MODULES ;
    eval "module --initial_load --no_redirect restore" ;
    unset lmod_dir ;
    
fi ;

export CCPE_VERSION="%(version)s"
'

""".replace( '$', '\\$' )


################################################################################
#
# Custom script /etc/bash.bashrc.local
#
local_bashrc_local = """
#! /bin/sh

#echo "Starting execution of bash.bashrc.local."

if [ "$CCPE_VERSION" != "24.11" ] ;
then

    # Setup of the PE.
    source /etc/cray-pe.d/cray-pe-configuration.sh
    
    mod_paths="/opt/cray/pe/lmod/modulefiles/core
               /opt/cray/pe/lmod/modulefiles/craype-targets/default
               $mpaths
               /opt/cray/modulefiles
               /opt/cray/pe/lmod/lmod/modulefiles/Core/"
    for p in $(echo $mod_paths) ; do
      if [ -d $p ] ; then
        MODULEPATH=$MODULEPATH:$p
      fi
    done
    MODULEPATH=$(echo $MODULEPATH | sed "s_^:__")
    export MODULEPATH
    
    # If init_module_list already has a value, its value will be used. Otherwise 
    # at least PrgEnv-$default_prgenv will be added to mlist.
    mlist="${init_module_list:-PrgEnv-$default_prgenv} ${site_module_list}"
    # The next line will not overwrite LMOD_SYSTEM_DEFAULT_MODULES if it already has a value.
    LMOD_SYSTEM_DEFAULT_MODULES=${LMOD_SYSTEM_DEFAULT_MODULES:-$(echo ${mlist} | sed "s_  *_:_g")}
    export LMOD_SYSTEM_DEFAULT_MODULES
    
    source $BASH_ENV && module --initial_load --no_redirect restore

fi

export CCPE_VERSION="%(version)s" 

#echo "Ending execution of bash.bashrc.local."

""".replace( '$', '\\$' )


################################################################################
#
# Custom script /etc/profile.local
#
#
local_profile_local = """
#echo "Starting execution of /etc/profile.local."

# Currently empty

#echo "Ending execution of etc/profile.local."

""".replace( '$', '\\$' )


################################################################################
#
# Script ccpe-shell
#
# Start a shell in the container with proper initialisation.
#
local_ccpe_shell="""
#!/bin/bash

if [ "$CCPE_VERSION" != "24.11" ]
then
    # Clean-up needed
    echo "Cleaning up..."
    # First save the essential variable set by the ccpe module
    save_SIF="$SIFCCPE"
    save_BIND="$SINGULARITY_BIND"

    # Now clean up
    module --force purge
    eval $($LMOD_DIR/clearLMOD_cmd --shell bash --full)
    unset LUMI_INIT_FIRST_LOAD
    # Make sure that /etc/profile does not quit immediately when called.
    unset PROFILEREAD

    # Now restore the variables set by the ccpe module
    export SIF="$save_SIF"
    export SIFCCPE="$save_SIF"
    export SINGULARITY_BIND="$save_BIND"
fi

singularity shell "$SIFCCPE" "$@"

""".replace( '$', '\\$' )

################################################################################
#
# Script ccpe-exec
#
# Execute in the container with proper initialisation.
#
local_ccpe_exec = """
#!/bin/bash

if [ "$CCPE_VERSION" != "24.11" ]
then
    # Clean-up needed
    echo "Cleaning up..."
    # First save the essential variable set by the ccpe module
    save_SIF="$SIFCCPE"
    save_BIND="$SINGULARITY_BIND"

    # Now clean up
    module --force purge
    eval $($LMOD_DIR/clearLMOD_cmd --shell bash --full)
    unset LUMI_INIT_FIRST_LOAD
    # Make sure that /etc/profile does not quit immediately when called.
    unset PROFILEREAD

    # Now restore the variables set by the ccpe module
    export SIF="$save_SIF"
    export SIFCCPE="$save_SIF"
    export SINGULARITY_BIND="$save_BIND"
fi

singularity shell $SIFCCPE "$@"

""".replace( '$', '\\$' )


################################################################################
#
# EasyBuild build commands
#
postinstallcmds = [
    'mkdir -p %(installdir)s/config',
    f'cat >%(installdir)s/config/99-z-init-ccpe.sh <<EOF {local_99_z_ccpe_init}EOF',
    'chmod a+rx %(installdir)s/config/99-z-init-ccpe.sh',
    f'cat >%(installdir)s/config/bash.bashrc.local <<EOF {local_bashrc_local}EOF',
    'chmod a+rx %(installdir)s/config/bash.bashrc.local',
    f'cat >%(installdir)s/config/profile.local <<EOF {local_profile_local}EOF',
    'chmod a+rx %(installdir)s/config/profile.local',
    'mkdir -p %(installdir)s/bin',
    f'cat >%(installdir)s/bin/ccpe-shell <<EOF {local_ccpe_shell}EOF',
    'chmod a+rx %(installdir)s/bin/ccpe-shell',
    f'cat >%(installdir)s/bin/ccpe-exec <<EOF {local_ccpe_exec}EOF',
    'chmod a+rx %(installdir)s/bin/ccpe-exec',
]

sanity_check_paths = {
    'files': [local_sif],
    'dirs':  [''],
}


################################################################################
#
# Custom module that does a lot of the magic.
#
modextravars = {
    'SIF':     '%(installdir)s/' + local_sif,
    'SIFCCPE': '%(installdir)s/' + local_sif,
}

modluafooter = """

-- Files and directories to inherit from the host system
mount_files = {
    -- Slurm mounts
    '/usr/bin/srun',
    '/usr/bin/sinfo',
    '/usr/bin/squeue',
    '/usr/bin/sbatch',
    '/usr/bin/scontrol',
    '/usr/bin/sbcast',
    '/usr/bin/sattach',
    '/usr/bin/sacct',
    '/usr/bin/scontrol',
    '/usr/bin/salloc',
    '/usr/lib64/slurm',
    '/var/spool/slurmd',
    '/etc/slurm',
    '/var/run/munge',
    '/usr/lib64/libmunge.so.2',
    '/usr/lib64/libmunge.so.2.0.0',
    '/usr/include/slurm',

    -- System mounts
    '/etc/hosts',

    -- GPU SDK mounts
    -- Customize these locations per-system
    '/opt/rocm-6.0.3',
    '/opt/modulefiles/amd',
    -- Do we need to bind /dev/kfd and /dev/dri?

    -- System libfabric install
    -- '/opt/cray/lib64',       -- Seems wrong, this is not where we have libfabric and it is already in the container.
    -- '/opt/cray/modulefiles', -- Is already in the container.
    
    -- Modulefiles that are needed for the PE but missing
    '/opt/cray/pe/lmod/modulefiles/core/rocm',
    '/opt/cray/pe/lmod/modulefiles/core/amd',   -- Other AMD-related files are likely missing also though?

    -- Lustre storage
    '/appl',
    '/flash',
    '/scratch',
    '/project',
    '/projappl',
    '/users',
    '/pfs',
}

for _, fileordir in ipairs( mount_files ) 
do 
    prepend_path( 'SINGULARITY_BIND', fileordir, ',' )
end

-- Inject some configuration files from LUMI.
prepend_path( 'SINGULARITY_BIND', '/etc/cray-pe.d/cray-pe-configuration.sh:/etc/cray-pe.d/cray-pe-configuration.sh', ',' )
prepend_path( 'SINGULARITY_BIND', '%(installdir)s/config/99-z-init-ccpe.sh:/.singularity.d/env/99-z-init-ccpe.sh', ',' )
prepend_path( 'SINGULARITY_BIND', '%(installdir)s/config/bash.bashrc.local:/etc/bash.bashrc.local', ',' ) -- Or could chose to take the one from the system.
prepend_path( 'SINGULARITY_BIND', '%(installdir)s/config/profile.local:/etc/profile.local', ',' )

"""

moduleclass = 'devel'
